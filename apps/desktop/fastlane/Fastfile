default_platform(:mac)

# Static configuration for the Mac desktop app
require 'json'

# Read App Store Connect supported locales from electron-builder.json
def load_app_store_locales
  config_path = File.expand_path("../electron-builder.json", __dir__)
  config = JSON.parse(File.read(config_path))
  bundle_localizations = config.dig("mac", "extendInfo", "CFBundleLocalizations") || []
  
  # Convert to App Store Connect locale format
  bundle_localizations.map do |locale|
    case locale
    when "en" then "en-US"  # App Store requires en-US format
    else locale  # Others should match (pt-BR, zh-Hans, etc.)
    end
  end.sort
end

APP_CONFIG = {
  app_identifier: "com.bitwarden.desktop",
  release_notes_path: "fastlane/release_notes",
  locales: load_app_store_locales
}

platform :mac do
  desc "Prepare release notes from changelog"
  lane :prepare_release_notes do |options|
    changelog = options[:changelog] || "Bug fixes and improvements"
    
    # Create release notes hash for all supported locales
    notes = {}
    APP_CONFIG[:locales].each do |locale|
      notes[locale] = changelog
      UI.message("Created release notes for #{locale}: #{changelog[0,50]}#{changelog.length > 50 ? '...' : ''}")
    end
    
    UI.success("✅ Prepared release notes for #{APP_CONFIG[:locales].count} locales")
    notes
  end

  desc "Display configuration information"
  lane :show_config do |options|
    build_number = options[:build_number] || ENV["BUILD_NUMBER"]
    
    UI.message("📦 App ID: #{APP_CONFIG[:app_identifier]}")
    UI.message("🔢 Build Number: #{build_number}")
    UI.message("🌍 Locales: #{APP_CONFIG[:locales].count}")
  end

  desc "Publish desktop to the Mac App Store"
  lane :publish do |options|
    build_number = options[:build_number] || ENV["BUILD_NUMBER"]
    app_version = options[:app_version] || ENV["APP_VERSION"]
    changelog = options[:changelog] || "Bug fixes and improvements"
    submit_for_review = options[:submit_for_review] == "true" || options[:submit_for_review] == true
    is_dry_run = options[:dry_run] == "true" || options[:dry_run] == true
    
    if is_dry_run
      UI.header("🧪 DRY RUN: Testing Bitwarden Desktop App Store submission")
    else
      UI.header("🚀 Publishing Bitwarden Desktop to Mac App Store")
    end
    
    # Show configuration info
    show_config(build_number: build_number)
    
    # Validate app_version
    UI.user_error!("❌ APP_VERSION is required") if app_version.nil? || app_version.empty?
    
    # Prepare release notes for all locales
    notes = prepare_release_notes(changelog: changelog)
    
    if is_dry_run
      UI.important("🧪 DRY RUN MODE - Skipping actual App Store Connect submission")
      UI.message("✅ Validation passed")
      UI.message("✅ Release notes prepared for #{APP_CONFIG[:locales].count} locales")
      UI.message("✅ Release notes: #{changelog[0,100]}#{changelog.length > 100 ? '...' : ''}")
      UI.success("🎯 DRY RUN COMPLETE - Everything looks ready for production!")
      next # Use 'next' instead of 'return' in fastlane lanes
    end

    # Set up App Store Connect API
    app_store_connect_api_key(
      key_id: "6TV9MKN3GP",
      issuer_id: ENV["APP_STORE_CONNECT_TEAM_ISSUER"],
      key_content: Base64.encode64(ENV["APP_STORE_CONNECT_AUTH_KEY"]),
      is_key_content_base64: true
    )

    # Release notes already prepared and returned from prepare_release_notes lane
    UI.message("📝 Using release notes for #{notes.keys.count} locales")


    # Upload to App Store Connect
    deliver(
      platform: "osx",
      app_identifier: APP_CONFIG[:app_identifier],
      app_version: app_version,
      build_number: build_number,
      skip_binary_upload: true,
      skip_screenshots: true,
      skip_metadata: true, # Skip metadata (managed outside of automation)
      release_notes: notes,
      submit_for_review: submit_for_review,
      phased_release: true, # Enable 7-day phased rollout
      precheck_include_in_app_purchases: false,
      run_precheck_before_submit: false,
      automatic_release: true,
      force: true
    )
    
    if submit_for_review
      UI.success("🎉 Successfully submitted Bitwarden Desktop v#{build_number} for App Store review!")
    else
      UI.success("📤 Successfully uploaded Bitwarden Desktop v#{build_number} to App Store Connect")
    end
  end
end
