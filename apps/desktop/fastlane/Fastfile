default_platform(:mac)

# Static configuration for the Mac desktop app
require 'json'
require 'base64'

APP_CONFIG = {
  app_identifier: "com.bitwarden.desktop",
  release_notes_path: "fastlane/release_notes",
  locales: ["ca", "zh-Hans", "zh-Hant", "da", "nl-NL", "en-US", "fi", "fr-FR", "de-DE", "id", "it", "ja", "ko", "no", "pt-PT", "pt-BR", "ru", "es-ES", "es-MX", "sv", "tr", "vi", "en-GB", "th"]
}

platform :mac do
  desc "Prepare release notes from changelog"
  lane :prepare_release_notes do |options|
    changelog = options[:changelog] || "Bug fixes and improvements"
    
    # Format release notes: convert double spaces to newlines for better formatting
    # This handles copy-pasted text from Jira where bullet points become sentences with double spaces
    formatted_changelog = changelog.gsub(/\.  /, ".\n")
    
    # Create release notes directories and files for all locales
    APP_CONFIG[:locales].each do |locale|
      dir = "release_notes/#{locale}"
      FileUtils.mkdir_p(dir)
      File.write("#{dir}/release_notes.txt", formatted_changelog)
      UI.message("Creating release notes for #{locale}")
    end

    # Create release notes hash for deliver
    notes = APP_CONFIG[:locales].each_with_object({}) do |locale, hash|
      file_path = "release_notes/#{locale}/release_notes.txt"
      if File.exist?(file_path)
        hash[locale] = File.read(file_path)
      else
        UI.important("No release notes found for #{locale} at #{file_path}, skipping.")
      end
    end
    
    UI.success("✅ Prepared release notes for #{APP_CONFIG[:locales].count} locales")
    notes
  end

  desc "Display configuration information"
  lane :show_config do |options|
    build_number = (options[:build_number] || ENV["BUILD_NUMBER"]).to_s.strip
    app_version = (options[:app_version] || ENV["APP_VERSION"]).to_s.strip
    
    UI.message("📦 App ID: #{APP_CONFIG[:app_identifier]}")
    UI.message("🏷️ Version: #{app_version.empty? ? '(not set)' : app_version}")
    UI.message("🔢 Build Number: #{build_number}")
    UI.message("🌍 Locales: #{APP_CONFIG[:locales].count}")
  end


  desc "Publish desktop to the Mac App Store"
  lane :publish do |options|
    build_number = (options[:build_number] || ENV["BUILD_NUMBER"]).to_s.strip
    app_version = (options[:app_version] || ENV["APP_VERSION"]).to_s.strip
    changelog = options[:changelog] || "Bug fixes and improvements"
    is_dry_run = options[:dry_run] == "true" || options[:dry_run] == true
    
    if is_dry_run
      UI.header("🧪 DRY RUN: Testing Bitwarden Desktop App Store submission")
    else
      UI.header("🚀 Publishing Bitwarden Desktop to Mac App Store")
    end
    
    # Show configuration info
    show_config(build_number: build_number, app_version: app_version)
    
    # Validate app_version
    UI.user_error!("❌ APP_VERSION is required") if app_version.nil? || app_version.empty?
    # Validate build_number
    UI.user_error!("❌ BUILD_NUMBER is required") if build_number.nil? || build_number.empty?
    
    # Prepare release notes for all locales
    notes = prepare_release_notes(changelog: changelog)
    
    if is_dry_run
      UI.important("🧪 DRY RUN MODE - Skipping actual App Store Connect submission")
      UI.message("✅ Validation passed")
      UI.message("✅ Release notes prepared for #{APP_CONFIG[:locales].count} locales")
      UI.message("✅ Release notes: #{changelog[0,100]}#{changelog.length > 100 ? '...' : ''}")
      UI.success("🎯 DRY RUN COMPLETE - Everything looks ready for production!")
      next # Use 'next' instead of 'return' in fastlane lanes
    end

    # Set up App Store Connect API
    app_store_connect_api_key(
      key_id: "6TV9MKN3GP",
      issuer_id: ENV["APP_STORE_CONNECT_TEAM_ISSUER"],
      key_content: Base64.encode64(ENV["APP_STORE_CONNECT_AUTH_KEY"]),
      is_key_content_base64: true
    )

    UI.message("📝 Using release notes for #{notes.keys.count} locales")
    UI.message("🎯 Publishing version #{app_version} with build #{build_number}")

    # Upload to App Store Connect
    deliver(
      platform: "osx",
      app_identifier: APP_CONFIG[:app_identifier],
      app_version: app_version,
      build_number: build_number,
      metadata_path: "metadata",
      skip_binary_upload: true,
      skip_screenshots: true,
      skip_metadata: true, 
      release_notes: notes,
      edit_live: false,
      submit_for_review: true, # if this is false, the build number does not attach to the draft
      phased_release: true, # Enable 7-day phased rollout
      precheck_include_in_app_purchases: false,
      run_precheck_before_submit: false,
      automatic_release: true,
      force: true
    )

    UI.success("🎉 Successfully submitted Bitwarden Desktop #{app_version} #{build_number} for App Store review!")
  end
end
