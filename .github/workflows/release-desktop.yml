name: Release Desktop
run-name: Release Desktop ${{ inputs.release_type }}

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release Type'
        required: true
        default: 'Release'
        type: choice
        options:
          - Release
          - Dry Run
      release_notes:
        description: 'Release Notes (What''s New) - Required for App Store submission'
        required: true
        type: string
      auto_submit_for_review:
        description: 'Auto-submit for Apple review (unchecked = upload only, checked = submit for review)'
        required: false
        type: boolean
        default: false

defaults:
  run:
    shell: bash

permissions:
  contents: read

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    outputs:
      release_version: ${{ steps.version.outputs.version }}
      release_channel: ${{ steps.release_channel.outputs.channel }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Branch check
        if: ${{ github.event.inputs.release_type != 'Dry Run' }}
        run: |
          if [[ "$GITHUB_REF" != "refs/heads/rc" ]] && [[ "$GITHUB_REF" != "refs/heads/hotfix-rc-desktop" ]]; then
            echo "==================================="
            echo "[!] Can only release from the 'rc' or 'hotfix-rc-desktop' branches"
            echo "==================================="
            exit 1
          fi

      - name: Check Release Version
        id: version
        uses: bitwarden/gh-actions/release-version-check@main
        with:
          release-type: ${{ inputs.release_type }}
          project-type: ts
          file: apps/desktop/src/package.json
          monorepo: true
          monorepo-project: desktop

      - name: Get Version Channel
        id: release_channel
        run: |
          case "${{ steps.version.outputs.version }}" in
            *"alpha"*)
              echo "channel=alpha" >> $GITHUB_OUTPUT
              echo "[!] We do not yet support 'alpha'"
              exit 1
              ;;
            *"beta"*)
              echo "channel=beta" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "channel=latest" >> $GITHUB_OUTPUT
              ;;
          esac

      - name: Download all artifacts
        if: ${{ github.event.inputs.release_type != 'Dry Run' }}
        uses: bitwarden/gh-actions/download-artifacts@main
        with:
          workflow: build-desktop.yml
          workflow_conclusion: success
          branch: ${{ github.ref_name }}
          path: apps/desktop/artifacts

      - name: Dry Run - Download all artifacts
        if: ${{ github.event.inputs.release_type == 'Dry Run' }}
        uses: bitwarden/gh-actions/download-artifacts@main
        with:
          workflow: build-desktop.yml
          workflow_conclusion: success
          branch: main
          path: apps/desktop/artifacts

      - name: Rename .pkg to .pkg.archive
        env:
          PKG_VERSION: ${{ steps.version.outputs.version }}
        working-directory: apps/desktop/artifacts
        run: mv Bitwarden-${{ env.PKG_VERSION }}-universal.pkg Bitwarden-${{ env.PKG_VERSION }}-universal.pkg.archive

      - name: Create Release
        uses: ncipollo/release-action@cdcc88a9acf3ca41c16c37bb7d21b9ad48560d87 # v1.15.0
        if: ${{ steps.release_channel.outputs.channel == 'latest' && github.event.inputs.release_type != 'Dry Run' }}
        env:
          PKG_VERSION: ${{ steps.version.outputs.version }}
          RELEASE_CHANNEL: ${{ steps.release_channel.outputs.channel }}
        with:
          artifacts: "apps/desktop/artifacts/Bitwarden-${{ env.PKG_VERSION }}-amd64.deb,
            apps/desktop/artifacts/Bitwarden-${{ env.PKG_VERSION }}-x86_64.rpm,
            apps/desktop/artifacts/Bitwarden-${{ env.PKG_VERSION }}-x64.freebsd,
            apps/desktop/artifacts/bitwarden_${{ env.PKG_VERSION }}_amd64.snap,
            apps/desktop/artifacts/Bitwarden-${{ env.PKG_VERSION }}-x86_64.AppImage,
            apps/desktop/artifacts/Bitwarden-Portable-${{ env.PKG_VERSION }}.exe,
            apps/desktop/artifacts/Bitwarden-Installer-${{ env.PKG_VERSION }}.exe,
            apps/desktop/artifacts/Bitwarden-${{ env.PKG_VERSION }}-ia32-store.appx,
            apps/desktop/artifacts/Bitwarden-${{ env.PKG_VERSION }}-ia32.appx,
            apps/desktop/artifacts/bitwarden-${{ env.PKG_VERSION }}-ia32.nsis.7z,
            apps/desktop/artifacts/Bitwarden-${{ env.PKG_VERSION }}-x64-store.appx,
            apps/desktop/artifacts/Bitwarden-${{ env.PKG_VERSION }}-x64.appx,
            apps/desktop/artifacts/bitwarden-${{ env.PKG_VERSION }}-x64.nsis.7z,
            apps/desktop/artifacts/Bitwarden-${{ env.PKG_VERSION }}-arm64-store.appx,
            apps/desktop/artifacts/Bitwarden-${{ env.PKG_VERSION }}-arm64.appx,
            apps/desktop/artifacts/bitwarden-${{ env.PKG_VERSION }}-arm64.nsis.7z,
            apps/desktop/artifacts/bitwarden.${{ env.PKG_VERSION }}.nupkg,
            apps/desktop/artifacts/Bitwarden-${{ env.PKG_VERSION }}-universal-mac.zip,
            apps/desktop/artifacts/Bitwarden-${{ env.PKG_VERSION }}-universal.dmg,
            apps/desktop/artifacts/Bitwarden-${{ env.PKG_VERSION }}-universal.dmg.blockmap,
            apps/desktop/artifacts/Bitwarden-${{ env.PKG_VERSION }}-universal.pkg.archive,
            apps/desktop/artifacts/${{ env.RELEASE_CHANNEL }}.yml,
            apps/desktop/artifacts/${{ env.RELEASE_CHANNEL }}-linux.yml,
            apps/desktop/artifacts/${{ env.RELEASE_CHANNEL }}-mac.yml"
          commit: ${{ github.sha }}
          tag: desktop-v${{ env.PKG_VERSION }}
          name: Desktop v${{ env.PKG_VERSION }}
          body: "<insert release notes here>"
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: true

  publish-mas:
    name: Fastlane - Publish to Mac App Store
    runs-on: macos-14
    needs: setup
    permissions:
      contents: read
      id-token: write
    env:
      _PACKAGE_VERSION: ${{ needs.setup.outputs.release_version }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Download MacOS App Store build number
        uses: bitwarden/gh-actions/download-artifacts@main
        id: download-build-number-artifact
        with:
          workflow: build-desktop.yml
          path: apps/desktop/artifacts
          workflow_conclusion: success
          branch: ${{ github.ref_name }}
          artifacts: macos-build-number.json

      - name: Setup Ruby and Install Fastlane
        uses: ruby/setup-ruby@ca041f971d66735f3e5ff1e21cc13e2d51e7e535 # v1.233.0
        with:
          ruby-version: '3.0'
          bundler-cache: false
          working-directory: apps/desktop
        
      - name: Install Fastlane
        working-directory: apps/desktop
        run: |
          gem install fastlane

      - name: Log in to Azure
        uses: bitwarden/gh-actions/azure-login@main
        with:
          subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          tenant_id: ${{ secrets.AZURE_TENANT_ID }}
          client_id: ${{ secrets.AZURE_CLIENT_ID }}

      - name: Get Azure Key Vault secrets
        id: get-kv-secrets
        uses: bitwarden/gh-actions/get-keyvault-secrets@main
        with:
          keyvault: gh-clients
          secrets: "APP-STORE-CONNECT-AUTH-KEY,APP-STORE-CONNECT-TEAM-ISSUER"

      - name: Log out from Azure
        uses: bitwarden/gh-actions/azure-logout@main

      - name: Publish to App Store
        env:
          APP_STORE_CONNECT_TEAM_ISSUER: ${{ steps.get-kv-secrets.outputs.APP-STORE-CONNECT-TEAM-ISSUER }}
          APP_STORE_CONNECT_AUTH_KEY: ${{ steps.get-kv-secrets.outputs.APP-STORE-CONNECT-AUTH-KEY }}
        working-directory: apps/desktop
        run: |
          BUILD_NUMBER=$(jq -r '.buildNumber' artifacts/macos-build-number.json)
          CHANGELOG="${{ inputs.release_notes }}"
          IS_DRY_RUN="${{ inputs.release_type == 'Dry Run' }}"
          
          if [ "$IS_DRY_RUN" = "true" ]; then
            echo "üß™ DRY RUN MODE - Testing without actual App Store submission"
            echo "üì¶ Would publish build $BUILD_NUMBER to Mac App Store"
          else
            echo "üöÄ PRODUCTION MODE - Publishing to Mac App Store"
            echo "üì¶ Publishing build $BUILD_NUMBER to Mac App Store"
          fi
          
          echo "üìù Release notes (${#CHANGELOG} chars): ${CHANGELOG:0:100}..."
          
          # Validate changelog length (App Store limit is 4000 chars)
          if [ ${#CHANGELOG} -gt 4000 ]; then
            echo "‚ùå Release notes too long: ${#CHANGELOG} characters (max 4000)"
            exit 1
          fi
          
          fastlane publish \
            build_number:$BUILD_NUMBER \
            changelog:"$CHANGELOG" \
            dry_run:$IS_DRY_RUN \
            submit_for_review:"${{ inputs.auto_submit_for_review }}"
